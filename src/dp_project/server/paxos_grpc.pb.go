// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: server/paxos.proto

package paxos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaxosService_Prepare_FullMethodName = "/paxos.PaxosService/Prepare"
	PaxosService_Accept_FullMethodName  = "/paxos.PaxosService/Accept"
)

// PaxosServiceClient is the client API for PaxosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PaxosService defines the RPC methods for the Paxos consensus algorithm.
type PaxosServiceClient interface {
	// Prepare initiates the prepare phase for a Paxos instance.
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareReply, error)
	// Accept sends an accept request for a Paxos instance.
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error)
}

type paxosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxosServiceClient(cc grpc.ClientConnInterface) PaxosServiceClient {
	return &paxosServiceClient{cc}
}

func (c *paxosServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareReply)
	err := c.cc.Invoke(ctx, PaxosService_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosServiceClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptReply)
	err := c.cc.Invoke(ctx, PaxosService_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaxosServiceServer is the server API for PaxosService service.
// All implementations must embed UnimplementedPaxosServiceServer
// for forward compatibility.
//
// PaxosService defines the RPC methods for the Paxos consensus algorithm.
type PaxosServiceServer interface {
	// Prepare initiates the prepare phase for a Paxos instance.
	Prepare(context.Context, *PrepareRequest) (*PrepareReply, error)
	// Accept sends an accept request for a Paxos instance.
	Accept(context.Context, *AcceptRequest) (*AcceptReply, error)
	mustEmbedUnimplementedPaxosServiceServer()
}

// UnimplementedPaxosServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaxosServiceServer struct{}

func (UnimplementedPaxosServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPaxosServiceServer) Accept(context.Context, *AcceptRequest) (*AcceptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPaxosServiceServer) mustEmbedUnimplementedPaxosServiceServer() {}
func (UnimplementedPaxosServiceServer) testEmbeddedByValue()                      {}

// UnsafePaxosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaxosServiceServer will
// result in compilation errors.
type UnsafePaxosServiceServer interface {
	mustEmbedUnimplementedPaxosServiceServer()
}

func RegisterPaxosServiceServer(s grpc.ServiceRegistrar, srv PaxosServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaxosServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaxosService_ServiceDesc, srv)
}

func _PaxosService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaxosService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaxosService_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServiceServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaxosService_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServiceServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaxosService_ServiceDesc is the grpc.ServiceDesc for PaxosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaxosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paxos.PaxosService",
	HandlerType: (*PaxosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _PaxosService_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _PaxosService_Accept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/paxos.proto",
}
